service: sample-ecommerce-service
#variablesResolutionMode: 20210326

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
#  - serverless-certificate-creator
#  - serverless-domain-manager
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile, 'ChangeIt'}
  region: ${opt:region, 'eu-west-1'} # ChangeIt
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: ${opt:lambdaHashingVersion, '20201221'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # useful for performance optimization, ref: http keep alive

custom:
  env: ${file(./env/${self:provider.stage}.yml)}
  host: ${self:custom.env.DOMAIN}.${self:custom.env.ROOT_DOMAIN}
  domain: ${self:custom.host}
  dynamodb: ${file(./env/dynamodb.env.yml):${self:provider.stage}}
  package: ${file(./package.json)}
#  customCertificate:
#    certificateName: ${self:custom.domain}
#    hostedZoneName: '${self:custom.host}.'
#    region: ${self:provider.region}
#    tags:
#      Name: ${self:custom.domain}
#      Environment: ${self:provider.stage}
#  customDomain:
#    domainName: ${self:custom.domain}
#    certificateName: ${self:custom.domain}
#    stage: ${self:provider.stage}
#    basePath: api
#    createRoute53Record: true
#    endpointType: 'regional'
#    securityPolicy: tls_1_2
#    apiType: http
#    autoDomain: false


  webpack:
    packager: npm
    includeModules:
      forceExclude:
        - aws-sdk

functions: # add your functions
  health:
    handler: src/health.handler
    name: sampleGet
    description: used as base get method template
    events:
      - http:
          method: get
          cors: true
          path: health
#  getAllFromDynamoTable:
#    handler: src/getAllFromDynamoTable.handler
#    name: getAllFromDynamoTable
#    description: sample end point that fetches an item from SampleEcommerce
#    iamRoleStatementsName: getAll
#    environment:
#      TABLE_NAME:
#        Ref: SampleEcommerce
#    events:
#      - http:
#          method: get
#          cors: true
#          path: getAll
#    iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - dynamodb:Scan
#        Resource: '#{SampleEcommerce.Arn}'
  getAllOrderItems:
    handler: src/getAllOrderItems.handler
    name: getAllOrderItems
    iamRoleStatementsName: getAllOrderItems
    description: Get all orderItems (products) for a given order
    environment:
      TABLE_NAME:
        Ref: SampleEcommerce
    events:
      - http:
          method: get
          cors: true
          path: order/{orderId}/products
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: '#{SampleEcommerce.Arn}'
#  createItemInDynamoTable:
#    handler: src/createItemInDynamoTable.handler
#    name: createItemInDynamoTable
#    iamRoleStatementsName: createItem
#    description: sample end point that creates an item into SampleEcommerce
#    environment:
#      TABLE_NAME:
#        Ref: SampleEcommerce
#    events:
#      - http:
#          method: post
#          cors: true
#          path: create
#    iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - dynamodb:PutItem
#        Resource: '#{SampleEcommerce.Arn}'
#  updateItemInDynamoTable:
#    handler: src/updateItemInDynamoTable.handler
#    name: updateItemInDynamoTable
#    iamRoleStatementsName: updateItem
#    description: sample end point that updates an item into SampleEcommerce
#    environment:
#      TABLE_NAME:
#        Ref: SampleEcommerce
#    events:
#      - http:
#          method: put
#          cors: true
#          path: update
#    iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - dynamodb:UpdateItem
#        Resource: '#{SampleEcommerce.Arn}'
#  deleteItemInDynamoTable:
#    handler: src/deleteItemInDynamoTable.handler
#    name: deleteItemInDynamoTable
#    iamRoleStatementsName: deleteItem
#    description: sample end point that deletes an item from SampleEcommerce
#    environment:
#      TABLE_NAME:
#        Ref: SampleEcommerce
#    events:
#      - http:
#          method: delete
#          cors: true
#          path: delete
#    iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - dynamodb:DeleteItem
#        Resource: '#{SampleEcommerce.Arn}'
resources:
  # DynamoDB Tables
  - ${file(ServiceResources/dynamoDB/sampleEcommerce.yml)}
  # Output
  - ${file(ServiceResources/outputs.yml)}
