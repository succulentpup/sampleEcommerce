service: sample-ecommerce-service
#variablesResolutionMode: 20210326

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  profile: ${opt:profile, 'ChangeIt'}
  region: ${opt:region, 'eu-west-1'} # ChangeIt
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: ${opt:lambdaHashingVersion, '20201221'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # useful for performance optimization, ref: http keep alive

custom:
  env: ${file(./env/${self:provider.stage}.yml)}
  host: ${self:custom.env.DOMAIN}.${self:custom.env.ROOT_DOMAIN}
  domain: ${self:custom.host}
  dynamodb: ${file(./env/dynamodb.env.yml):${self:provider.stage}}
  package: ${file(./package.json)}

  webpack:
    packager: npm
    includeModules:
      forceExclude:
        - aws-sdk

functions: # add your functions
  health:
    handler: src/health.handler
    name: sampleGet
    description: used as base get method template
    events:
      - http:
          method: get
          cors: true
          path: health
  getAllOrderItems:
    handler: src/getAllOrderItems.handler
    name: getAllOrderItems
    iamRoleStatementsName: getAllOrderItems
    description: Get all orderItems (products) for a given order
    environment:
      TABLE_NAME:
        Ref: SampleEcommerce
    events:
      - http:
          method: get
          cors: true
          path: order/{orderId}/products
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: '#{SampleEcommerce.Arn}'
  getAllOrdersOfCustomer:
    handler: src/getAllOrdersOfCustomer.handler
    name: getAllOrdersOfCustomer
    iamRoleStatementsName: getAllOrdersOfCustomer
    description: Get all the orders for a given customer
    environment:
      TABLE_NAME:
        Ref: SampleEcommerce
    events:
      - http:
          method: get
          cors: true
          path: customer/{customerId}/orders
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: '#{SampleEcommerce.Arn}'
  getProductDetails:
    handler: src/getProductDetails.handler
    name: getProductDetails
    iamRoleStatementsName: getProductDetails
    description: Get the price and name for a given product
    environment:
      TABLE_NAME:
        Ref: SampleEcommerce
    events:
      - http:
          method: get
          cors: true
          path: product/{productId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: '#{SampleEcommerce.Arn}'
resources:
  # DynamoDB Tables
  - ${file(ServiceResources/dynamoDB/sampleEcommerce.yml)}
  # Output
  - ${file(ServiceResources/outputs.yml)}
